[
["welcome.html", "Tech Trainings - From Excel to R 1 Welcome 1.1 Agenda 1.2 Prerequisites", " Tech Trainings - From Excel to R James Simkins 2020-06-03 1 Welcome Hello! Welcome to Tech Trainings - From Excel to R. We’re here to enhance the productivity of your business by ditching Excel and employing R. Our tutorials are focused and designed for employees currently working. R is currently ranked as the 7th most popular language in the world - and with good reason! We’ll dive into why R is ranked so high and how it can benefit you and your business. This intro to R course is designed to teach R to businesses and employees who frequently use Excel for day-to-day operations. Few businesses around the world leverage the amazing features of R and we’re here to teach these skills. This is a concentrated, fast-paced course designed to improve business efficiency, cut down tedious tasks, and increase the creative time spent by employees. Most online R tutorials are far too broad and can leave a student frustrated at the vast abilities of R. R can be used to accomplish a great deal, but instead of showing off what R can do, we discuss and teach select skills that can be used to improve day-to-day business efficiency immediately. We’re not here to waste your time and overwhelm our students like other R workshops. This concentrated course follows a design of specific problem solving. We present common business practices often handled using Excel and show an employee can use R to accomplish the same task at a faster pace. The workshop is split into 4 days with assignments due each day. This course was developed by James Simkins who has taught multiple programming courses at the University of Delaware. 1.1 Agenda This course is designed to be a 5 day course intended to teach R to Excel Users. Day Deliverable 1 Overview 2 3 Filters &amp; joins (AH) 4 5 Final Project 1.2 Prerequisites Before the training, please do the following (7 minutes). All software is free. Download and install R and RStudio R: https://cloud.r-project.org/ RStudio: http://www.rstudio.com/download Follow your operating system’s normal installation process Download workshop data Data Folder here "],
["overview.html", "2 Overview 2.1 What is R? 2.2 Reasons to love R 2.3 Guiding Principles", " 2 Overview 2.1 What is R? R is an open-source (aka free) programming language. It was initially created to statistical operations in the 1990s but has since expanded greatly and can now be used to accomplish almost any data related task. Using R involves writing a script. A script is just an R document that performs some sort of analysis / operation / image creation. Writing code and generating an R script is done completely via typing as opposed to pointing and clicking. In this workshop we’ll learn how to write an R script and use it to perform data analysis. The purpose of this workshop is to teach working professionals how to use R for tasks they’d normally use Excel for. Excel is a powerful tool and is great for a variety of uses, but when it comes to crunching data, R will greatly improve the speed at which these tasks can be done. Furthermore, with R, mundane &amp; tedious tasks can be automated. When you write a script in R for a recurring task such as calculating a monthly budget, all one needs to do each month is provide the routine with a new dataset to crunch the numbers. Below are examples of why we use R. 2.2 Reasons to love R Attribute Reason Speed Spreadsheets that take 1 hour to calculate in Excel take less than a second in R Capacity Excel can handle thousands of records, R can handle millions Risk Reduction Excel requires process notes, manual steps, copy/paste values, fill down, etc. After writing a single R script, R is auditable reproducible within milliseconds - without any alterations to your original data Visualizations R is capable to create high quality visualizations and also has the capacity to create interactive visualizations that can easiliy be shared. Plots or images can easily be exported to PNG, JPEG, or even web-based interactive dashboards that can be hosted on a webpage Collaboration R script sharing is much safer than in Excel. Data output can be shared without the concern of a colleague editing the file output. RStudio connect or Github are also popular free track all changes that take place between R script files. Price R is completely free! Yes…every bit of it! 2.3 Guiding Principles Comment, comment, comment. Once you become comfortable coding in R, you’ll be able to churn out new R scripts at a faster rate. It’s very important that you comment on what you’re doing at each step in the script so if you need to look back on something you wrote you can reference what you were doing there. A comment in R is declared using the pound symbol (#). Keep raw data raw. An advantage of R is being able to read in an original spreadsheet and output a new spreadsheet as a separate file. Don’t overwrite the input file so in the event you make a mistake in your R routine, you can just edit the R script and re-run to edit/overwrite the output file or image. When in doubt, Google your R question - look for StackOverflow links. StackOverflow is a web-forum where programmers can post questions for help. This is an incredible tool that I still use daily for things I’ve forgotten. There are other helpful forums out there - StackOverflow is the most popular. Spaces in variable/file names are BAD. Let’s get into the habit of using underscores ’_’ or dashes ‘-’ or periods ‘.’ to separate words instead of spaces. From the computers side of variable name storage, it’s much safe to declare a variable name such as data_file as opposed to data file Let’s get coding! "],
["r-rstudio.html", "3 R &amp; RStudio 3.1 Open RStudio 3.2 R Studio Layout", " 3 R &amp; RStudio By now you’ve downloaded R and RStudio and you’re probably wondering, why do I need to download both? R is that programming language that is running on your computer. RStudio is what we call an Indegrated Development Environment (IDE) - this is a technical term for a human-interface app. RStudio is the application we’ll be using. It is our Microsoft Excel. RStudio runs R in the background for us and gives us information and a nice, user-friendly layout. Let’s open RStudio and get familiar with it. 3.1 Open RStudio Navigate to your applications folder on your computer. Launch RStudio. When you open it for the first time, you should see this. This is RStudio. When you open it for the first time, we’ll need to open a new RScript to begin coding. Open new R Script To open a new R Script, we select the blankpage with green plus icon and select R Script from the menu. This opens up the new R script and we can begin coding in R. Now that we have the R Script open, you’ll notice 4 quadrants. Let’s run through what those quadrants are. 3.2 R Studio Layout Now let’s describe what’s going on here in a little more detail. R Script - This is your canvas. This is where we write and edit our code. A lot of trial and error goes on here. R Console - This is where you run your code. When we talk about running code, we mean we’re telling R to execute the code we’ve written in the R Script. R Console is the place inside RStudio where we are using the R programming language. Variable Environment - This area keeps track of your variables, data tables, filenames, etc. We can select data tables to view from this list here. Files/Plots/Help - In this quadrant, we can toggle through files on our computer, view plots that we’re creating in R, search for help and descriptions of R functions, and more. "],
["installing-and-using-packages.html", "4 Installing and Using Packages 4.1 Checkpoint - Writing your first R code", " 4 Installing and Using Packages To use a function in R that performs a task (such as plotting, statistical analysis, etc.), we must first load the package into our R session. When we use Microsoft Excel, nearly all the functions you can use with it are available in the toolbar at the top of the page. In R, however, you’ll need to load in the packages you’d like to use. Once the package is loaded, R will recognize any functions you call that are part of that package. Here’s the code we use to load a package: library(base) In R, the package is the toolbox; the function is the tool. We need to load the woodworking toolbox in order to use the hammer. Most of the packages you’ll want to use are not previously installed on R. You’ll need to install them onto your local machine. Once they are installed once, you shouldn’t have to worry about installing them again. Here’s how you install the ggplot2 package. install.packages(&quot;ggplot2&quot;) You may be wondering, why do I need to load in the packages I want to use? R is designed to be fast. If you were to pre-load every package available in R, you’d be loading thousands of packages. We can keep R light and fast by only loading the specific “toolboxes” we need. Now that the ggplot2 package is installed, we can use any function that is within that package. If you’re curious about what functions are in a particular package, most packages have thorough documentation and examples online. 4.1 Checkpoint - Writing your first R code Let’s write an R script that prints out names, run the code to make sure it works properly, and then save it. # load the base package library(base) # let&#39;s create a list with our names names = list(&#39;Peter&#39;, &#39;Sarah&#39;, &#39;Tom&#39;, &#39;Helen&#39;) # now let&#39;s use the print function to print out those names print(names) ## [[1]] ## [1] &quot;Peter&quot; ## ## [[2]] ## [1] &quot;Sarah&quot; ## ## [[3]] ## [1] &quot;Tom&quot; ## ## [[4]] ## [1] &quot;Helen&quot; In this example, we created a variable called names. We used the list() function to populate a list of names. Then we used the print() function to print out the names variable. Once the script has been written, we simply navigate to File -&gt; Save As…-&gt; print_names.R . Remember, no spaces in the filename and it must be saved as .R. "],
["technical-definitions-rules.html", "5 Technical Definitions &amp; Rules 5.1 Important R Programming Definitions 5.2 Definitions in Action - TV Data Example", " 5 Technical Definitions &amp; Rules 5.1 Important R Programming Definitions Coding Name Example Definition syntax R code the nomenclature and structure of a programming language variable names Variables are used to store data, whose value can be changed according to our need. Variables can be declared using &lt;- (tradiational way) or by = (conventional way) package library(ggplot2) A collection of functions prewritten in R function print() A function is a set of statements organized together to perform a specific task. R has a set of preloaded functions that are part of the base package. If a function cannot be found as part of the base package, the function has likely already been built under another package that needs to be loaded in. Functions can be identified due to their enclosing parantheses () arguments read.csv(file = &quot;datasets/tv_shows.csv&quot;, header = FALSE) Components of a function that are separated by commas and declared using the = sign. index tv_data[3,55] The position of data within a data frame, matrix, list, vector, etc. In R, data is indexed as [row,column] and indexing is done via brackets [] loop for (n in names){print(n)} Repeats a task for a specified number of times. Saves a programmer from repeating codelines with different parameters. logical TRUE, FALSE TRUE and FALSE logical operators are declared using all caps arithmetic operators +,-,*,/,^ Math operators used for addition, subtraction, multiplication, division, exponent, respectively. comparison operators ==, &lt;, &gt;, &lt;=, &gt;=, != Is equal to, less than, greater than, less than or equal to, greater than or equal to, is NOT equal to, respectively and/or operators &amp;, | AND, OR string a_string = &quot;anythign within quotes, single or double&quot; Any value written within a pair of single quote or double quotes in R is treated as a string. numeric 1 Any number - integer, float, etc. vector as.vector(x = c(1,2,3,4)) Vectors are the most basic R data objects and there are six types of atomic vectors. They are logical, integer, double, complex, character and raw. lists list('Peter', 'Sarah', 'Tom', 'Helen') Lists are the R objects which contain elements of different types like − numbers, strings, vectors and another list inside it matrix matrix(c(1:5), nrow = 3, byrow = TRUE) Matrices are the R objects in which the elements are arranged in a two-dimensional rectangular layout. array array(data = c(1,2,3)) Arrays are the R data objects which can store data in more than two dimensions. For example − If we create an array of dimension (1, 2, 3) then it creates 3 rectangular matrices each with 1 rows and 2 columns. Arrays can store only one data type. data frame data.frame(tv_data) R version of Excel Spreadsheet. A data frame is a table or a two-dimensional array-like structure in which each column contains values of one variable and each row contains one set of values from each column. factor factor() Factors are the data objects which are used to categorize the data and store it as levels. They can store both strings and integers. They are useful in the columns which have a limited number of unique values. Like “Male,”Female&quot; and True, False etc. They are useful in data analysis for statistical modeling. help help(read.csv) Default helper function in R. Opens up documentation on a particular function in the lower right quadrant of R. class class(tv_data) Tells us what R is recognizing something as concatenate (c) c(“a”, “b”, “c”) A quick utility for concatenating strings together Additional examples can be found here 5.2 Definitions in Action - TV Data Example Now that we’re comfortable with R Studio and have some definitions under our belt, let’s dive in a little into some R code and discuss it. Here is a script that loads a dataset about TV shows and examines their IMDb rating. First, let’s just show the script without running it. # Load in the dataset using the read.csv() function tv_data = read.csv(file = &quot;datasets/tv_shows.csv&quot;, header = FALSE) # have R tell us what class tv_data is class(tv_data) # find the number of rows nrow(tv_data) # print the top 5 rows of the dataset using the head() function head(tv_data) # another way to print out the first 5 rows print(tv_data[1:5, ]) # print out the first 5 rows of the tv_data Title column head(tv_data$Title) # print out the first 5 rows of the tv_data Title Column head(tv_data[&#39;Title&#39;]) # print out the first 7 rows of the tv_data Title Column print(tv_data[&#39;Title&#39;][1:7,]) # sort the tv_data dataframe by the IMDb column from High values to Low values sorted_tv_data = tv_data[order(tv_data$IMDb, decreasing = TRUE), ] # print the top 5 rows of the dataset head(sorted_tv_data) # a column X is bugging me and shouldn&#39;t be there - let&#39;s NULL it out to remove it from our dataframe sorted_tv_data$X = NULL # print the first 10 rows of the sorted_tv_data column print(sorted_tv_data[1:10,]) Now, let’s run the script. Note that this will run line by line, so below each snippet of code R will return what we ask it to print. # Load in the dataset using the read.csv() function tv_data = read.csv(&quot;datasets/tv_shows.csv&quot;) # have R tell us what class tv_data is class(tv_data) ## [1] &quot;data.frame&quot; # print the top 5 rows of the dataset using the head() function head(tv_data) ## X Title Year Age IMDb Rotten.Tomatoes Netflix Hulu Prime.Video ## 1 0 Breaking Bad 2008 18+ 9.5 96% 1 0 0 ## 2 1 Stranger Things 2016 16+ 8.8 93% 1 0 0 ## 3 2 Money Heist 2017 18+ 8.4 91% 1 0 0 ## 4 3 Sherlock 2010 16+ 9.1 78% 1 0 0 ## 5 4 Better Call Saul 2015 18+ 8.7 97% 1 0 0 ## 6 5 The Office 2005 16+ 8.9 81% 1 0 0 ## Disney. type ## 1 0 1 ## 2 0 1 ## 3 0 1 ## 4 0 1 ## 5 0 1 ## 6 0 1 # another way to print out the first 5 rows print(tv_data[1:5, ]) ## X Title Year Age IMDb Rotten.Tomatoes Netflix Hulu Prime.Video ## 1 0 Breaking Bad 2008 18+ 9.5 96% 1 0 0 ## 2 1 Stranger Things 2016 16+ 8.8 93% 1 0 0 ## 3 2 Money Heist 2017 18+ 8.4 91% 1 0 0 ## 4 3 Sherlock 2010 16+ 9.1 78% 1 0 0 ## 5 4 Better Call Saul 2015 18+ 8.7 97% 1 0 0 ## Disney. type ## 1 0 1 ## 2 0 1 ## 3 0 1 ## 4 0 1 ## 5 0 1 # print out the first 5 rows of the tv_data Title column head(tv_data$Title) ## [1] Breaking Bad Stranger Things Money Heist Sherlock ## [5] Better Call Saul The Office ## 5564 Levels: .hack (The Hook Up Plan) #blackAF ... 頭文字D First Stage # print out the first 5 rows of the tv_data Title Column head(tv_data[&#39;Title&#39;]) ## Title ## 1 Breaking Bad ## 2 Stranger Things ## 3 Money Heist ## 4 Sherlock ## 5 Better Call Saul ## 6 The Office # print out the first 7 rows of the tv_data Title Column print(tv_data[&#39;Title&#39;][1:7,]) ## [1] Breaking Bad Stranger Things Money Heist Sherlock ## [5] Better Call Saul The Office Black Mirror ## 5564 Levels: .hack (The Hook Up Plan) #blackAF ... 頭文字D First Stage # sort the tv_data dataframe by the IMDb column from High values to Low values sorted_tv_data = tv_data[order(tv_data$IMDb, decreasing = TRUE), ] # print the top 5 rows of the dataset head(sorted_tv_data) ## X Title Year Age IMDb Rotten.Tomatoes Netflix Hulu ## 3024 3023 Destiny 2014 9.6 0 1 ## 1 0 Breaking Bad 2008 18+ 9.5 96% 1 0 ## 3178 3177 Hungry Henry 2014 9.5 0 1 ## 3748 3747 Malgudi Days 1987 all 9.5 0 0 ## 2366 2365 The Joy of Painting 1983 all 9.4 0 1 ## 3568 3567 Band of Brothers 2001 18+ 9.4 94% 0 0 ## Prime.Video Disney. type ## 3024 0 0 1 ## 1 0 0 1 ## 3178 0 0 1 ## 3748 1 0 1 ## 2366 1 0 1 ## 3568 1 0 1 # a column X is bugging me and shouldn&#39;t be there - let&#39;s NULL it out to remove it from our dataframe sorted_tv_data$X = NULL # print the first 10 rows of the sorted_tv_data column print(sorted_tv_data[1:10,]) ## Title Year Age IMDb Rotten.Tomatoes Netflix Hulu Prime.Video ## 3024 Destiny 2014 9.6 0 1 0 ## 1 Breaking Bad 2008 18+ 9.5 96% 1 0 0 ## 3178 Hungry Henry 2014 9.5 0 1 0 ## 3748 Malgudi Days 1987 all 9.5 0 0 1 ## 2366 The Joy of Painting 1983 all 9.4 0 1 1 ## 3568 Band of Brothers 2001 18+ 9.4 94% 0 0 1 ## 92 Our Planet 2019 7+ 9.3 93% 1 0 0 ## 326 Ramayan 1987 all 9.3 1 0 0 ## 3567 The Wire 2002 18+ 9.3 94% 0 0 1 ## 4129 Green Paradise 2011 all 9.3 0 0 1 ## Disney. type ## 3024 0 1 ## 1 0 1 ## 3178 0 1 ## 3748 0 1 ## 2366 0 1 ## 3568 0 1 ## 92 0 1 ## 326 0 1 ## 3567 0 1 ## 4129 0 1 5.2.1 Line by Line Discussion Code Discussion tv_data = read.csv(file = &quot;datasets/tv_shows.csv&quot;) We open our dataset tv_shows.csv which is located in our “datasets/” folder. We open the file using the read.csv() function. Within the read.csv() function, we used the file = argument to state which file we wanted to open - note that within functions, arguments can only be specified via the = sign. We name our dataset as tv_data. Notice that we used the = operator to declare our dataset as tv_data, but we also could’ve used the traditional way of &lt;- class(tv_data) have R tell us the class of our tv_data nrow(tv_data) have R tell us the number of rows in tv_data head(tv_data) The head() function prints out the first 5 rows of an R dataframe. This is the same as viewing the first 5 rows in Microsoft Excel print(tv_data[1:5, ]) We use indexing to print out the first 5 rows of the tv_data dataframe tv_data[row 1 to row 5, all columns]. In R, the rows and columns are separated by a comma and the colon symbol can be interpreted as to. So, when we have [1:5,] we’re telling R to print row 1 to row 5. By leaving the column part blank (aka part after the comma), we’re telling R to print all columns from the specified rows. head(tv_data$Title) We print out the first 5 rows of the Title column of the tv_data dataframe. We query the Title column using the $ key. If we type tv_data$ and hit the Tab key on our keyboard, R presents us with autocomplete options which are the column names within the tv_data dataset print(tv_data['Title'][1:7,]) We print out the first 7 rows of the Title column using the index method. When querying a column/variable from a dataframe, we can either use the tv_data$Title or we can use the tv_data['Title']. The additional brackets showing [1:7,] print the first 7 rows. sorted_tv_data = tv_data[order(tv_data$IMDb, decreasing = TRUE), ] Here we create a new dataframe called sorted_tv_data where we order the tv_data dataframe by each rows IMDb score. This can be read as from the tv_data dataframe, order the all of the rows based on the tv_data$IMDB column with decreasing order. order() is a function and decreasing = TRUE is an argument of that function. Since the columns are remaining the same, we leave the space after the , blank. head(sorted_tv_data) Print the first 5 lines of our new sorted_tv_data dataframe. sorted_tv_data$X = NULL We notice a column named X and see that it has no meaning since we have a default row number within the R dataframe. We want to delete this column without disturbing the rest of the dataframe. We do so by telling R that the X column shall be converted to NULL, thus removing the column print(sorted_tv_data[1:10,]) Print out the top 10 IMDb rated shows You are not expected to fully grasp everything at this point. As we progress through the tutorials, these concepts will make more sense. "],
["avacados-tutorial.html", "6 Avacados Tutorial 6.1 Load the Avacados Dataset", " 6 Avacados Tutorial For this tutorial, we’ll pretend we work for a supermarket chain interested in avacado pricing. Understanding price changes and the drivers behind those changes can help us forecast future shifts that enable us to stay ahead of the market and create appropriate pricing given the economic environment. Goals of this tutorial Datasets used 6.1 Load the Avacados Dataset First we’ll load in the packages and the avacados dataset. # first let&#39;s load in the packages we need library(data.table) library(dplyr) library(ggplot2) library(stringr) library(DT) library(tidyr) library(corrplot) library(leaflet) library(lubridate) # now let&#39;s load in our dataset using read.csv original_df &lt;- read.csv(&quot;datasets/avocado.csv&quot;) ggplot(original_df, aes(x=AveragePrice, fill=type)) + geom_density() "]
]
