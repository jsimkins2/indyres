[["introduction-to-r.html", "Introduction to R 1 Introduction To R 1.1 Agenda", " Introduction to R James Simkins 2020-11-11 1 Introduction To R Hello! Welcome to Tech Trainings - From Excel to R. We’re here to enhance the productivity of your business by ditching Excel and employing R. Our tutorials are focused and designed for employees currently working. R is currently ranked as the 7th most popular language in the world - and with good reason! We’ll dive into why R is ranked so high and how it can benefit you and your business. This intro to R course is designed to teach R to businesses and employees who frequently use Excel for day-to-day operations. Few businesses around the world leverage the amazing features of R and we’re here to teach these skills. To put it bluntly, R saves you and your employees a ton of time. We’ve seen users cut down daily 2-3 hour tasks in Excel into 2-3 minutes after some basic introduction to R. In this case, R saved this individual employee 750 hours per year - allowing employee time to be used towards more creative problem-solving endeavors. This is a concentrated, fast-paced course designed to improve business efficiency, cut down tedious tasks, and increase the creative time spent by employees. Most online R tutorials are far too broad and can leave a student frustrated at the vast abilities of R. R can be used to accomplish a great deal, but instead of showing off what R can do, we discuss and teach select skills that can be used to improve day-to-day business efficiency immediately. We’re not here to waste your time and overwhelm our students like other R workshops. This concentrated course follows a design of specific problem solving. We present common business practices often handled using Excel and show an employee can use R to accomplish the same task at a faster pace. The workshop is split into 5 days with assignments due each day. This course was developed by James Simkins who has taught multiple programming courses at the University of Delaware. 1.1 Agenda This course is designed to be a 5 day course intended to teach R to Excel Users. The intended time per day is 2-3 hours. Day Focus 1 Overview 2 Avacado Tutorial 1 3 Avacado Tutorial 2 4 Visa Tutorial 1 5 Visa Tutorial 2 "],["getting-started-with-r.html", "2 Getting Started with R 2.1 Why is there such a buzz around R? 2.2 Reasons to love R 2.3 Downloading Guide 2.4 Rstudio 2.5 Download Workshop Datasets 2.6 Video Examples 2.7 Getting familiar with RStudio 2.8 Open RStudio 2.9 R Studio Layout", " 2 Getting Started with R 2.1 Why is there such a buzz around R? R is an open-source programming language used for data science, statistics, and data visualization. R is currently ranked as the 7th most popular language in the world. Since R is open-source, anyone can contribute to or use R packages that contain pre-built functions/operations. This greatly accelerates our ability to share and collaborate. The purpose of this workshop is to teach working professionals how to use R for tasks they’d normally use Excel for. Excel is a powerful tool and is great for a variety of uses, but when it comes to crunching data, R will greatly improve the speed at which these tasks can be done. Furthermore, with R, mundane &amp; tedious tasks can be automated. When you write a script in R for a recurring task such as calculating a monthly budget, all one needs to do each month is provide the routine with a new dataset to crunch the numbers. Below are examples of why we use R. 2.2 Reasons to love R Attribute Reason Speed R is FAST. It can number crunch magnitudes faster than Microsoft Excel, for example. Capacity R can handle millions of data records. Large datasets that crash in Microsoft Excel won’t crash in R. Risk Reduction After writing a single R Script, the process of your data science routine is auditable and reproducible within milliseconds. We can write 1 script and make alterations as we see fit. We don’t have to replicate a process of pointing and clicking in Microsoft Excel or ArcGIS. For example, if you are working with a dataset that multiple people are using, you can load this dataset in R and perform the tasks that you need without making any changes to the original dataset. Visualizations R is capable to create high quality visualizations and also has the capacity to create interactive visualizations that can easiliy be shared. Plots or images can easily be exported to PNG, JPEG, or even web-based interactive dashboards that can be hosted on a webpage Collaboration R script sharing is safe and easy. As mentioned above, a team using the same data input file but performing different tasks on it can do so without editing the data input file for everyone else. Data output can also be shared without the concern of a colleague editing the file output. RStudio connect or Github are also popular free track all changes that take place between R script files. Price R is completely free! Yes…every bit of it! 2.3 Downloading Guide Navigate to the R website: https://cloud.r-project.org/ Click Download for your Operating System (Windows, Mac OSx, or Linux - if you don’t have a MacBook, then you’re using Windows most likely) Click the most recent R version to download. Install the downloaded application as you would with any other application on your computer. 2.4 Rstudio While R is the language, RStudio is the application we use to run R. Technically speaking, RStudio is an integrated development environment for R. RStudio makes coding in R easier by highlighting syntax, autocompleting symbols and names, and visualizing our R environment. These aspects are explained in further detail in the R Coding Fundamentals section. For now, let’s download RStudio. Navigate to the RStudio Website: http://www.rstudio.com/download Click Download under RStudio Desktop Free This website detects your operating system, allowing you to just click download again. Note that if it doesn’t automatically detect just select the download next to your operating system below this Note that you may be asked to install command line developer tools if you’re using a Mac - select Yes. Install the downloaded application as you normally would on your computer. 2.5 Download Workshop Datasets Navigate to the database - https://github.com/jsimkins2/dataforge Click on Code - then click download as zip 2.6 Video Examples If you want to watch a step-by-step tutorial on how to install R for Mac or Windows, you can watch these videos courtest of Dr. Roger Peng Installing R on Windows Installing R on the Mac Installing RStudio 2.7 Getting familiar with RStudio By now you’ve downloaded R and RStudio and you’re probably wondering, why do I need to download both? R is that programming language that is running on your computer. RStudio is what we call an Indegrated Development Environment (IDE) - this is a technical term for a pretty application that’s all dressed up on the surface but underneath is really crunching some numbers (using R) at serious speeds. RStudio is the application we’ll be using. Let’s open RStudio and get familiar with it. 2.8 Open RStudio Navigate to your applications folder on your computer. Launch RStudio. When you open it for the first time, you should see this. This is RStudio. When you open it for the first time, we’ll need to open a new RScript to begin coding. Open new R Script To open a new R Script, we select the blankpage with green plus icon and select R Script from the menu. This opens up the new R script and we can begin coding in R. Now that we have the R Script open, you’ll notice 4 quadrants. Let’s run through what those quadrants are. 2.9 R Studio Layout Now let’s describe what’s going on here in a little more detail. R Script - This is your canvas. This is where we write and edit our code. A lot of trial and error goes on here. R Console - This is where you run your code. When we talk about running code, we mean we’re telling R to execute the code we’ve written in the R Script. R Console is the place inside RStudio where we are using the R programming language. Variable Environment - This area keeps track of your variables, data tables, filenames, etc. Anything that you run in R that has a name will be stored here. Imagine the Variable Environment to be your closet - every time you make/buy a new sweater, the sweater goes in the closet. We can select data tables to view from this list here. Files/Plots/Help - In this quadrant, we can toggle through files on our computer (we can view where your files are stored), view plots/visualizations that we’re creating in R (whenever you create a plot in R it is output here first), search for help and descriptions of R functions (there’s descriptions on every function you’ll use in R - they can all be loaded here in the help tab), and more. "],["definitions-rules.html", "3 Definitions &amp; Rules 3.1 Important R Programming Definitions 3.2 Rules 3.3 General Recommendations", " 3 Definitions &amp; Rules This is a reference guide to look back on when you’re stuck. These definitions and rules are not expected to be understood right now but it’s important you know you can look back on this as a quick-reference. 3.1 Important R Programming Definitions Read through these now to get familiar and refer back to these whenever you need a refresher. You’re not expected to have these memorized or even understood at this moment. These will make more sense as we progress through the course. Coding Name Example Definition syntax R code the nomenclature and structure of a programming language debugging Failed R run debugging involves fixing R code that is written incorrectly and doesn’t run variable my_var Variables are used to store data, whose value can be changed according to our need. Variables can be declared using &lt;- (tradiational way) or by = (conventional way) package library(ggplot2) A collection of functions prewritten in R function print() A function is a set of statements organized together to perform a specific task. R has a set of preloaded functions that are part of the base package. If a function cannot be found as part of the base package, the function has likely already been built under another package that needs to be loaded in. Functions can be identified due to their enclosing parantheses () arguments read.csv(file = \"datasets/avocados.csv\", header = FALSE) Components of a function that are separated by commas and declared using the = sign. Arguments in this example are file = and header = index mtcars[3,5] The position of data within a data frame, matrix, list, vector, etc. In R, data is indexed as [row,column] and indexing is done via brackets [] loop for (n in names){print(n)} Repeats a task for a specified number of times. Saves a programmer from repeating codelines with different parameters. logical TRUE, FALSE TRUE and FALSE logical operators are declared using all caps arithmetic operators +,-,*,/,^ Math operators used for addition, subtraction, multiplication, division, exponent, respectively. comparison operators ==, &lt;, &gt;, &lt;=, &gt;=, != Is equal to, less than, greater than, less than or equal to, greater than or equal to, is NOT equal to, respectively and/or operators &amp;, | AND, OR string a_string = \"anythign within quotes, single or double\" Any value written within a pair of single quote or double quotes in R is treated as a string. numeric 1 Any number - integer, float, etc. vector as.vector(x = c(1,2,3,4)) Vectors are the most basic R data objects and there are six types of atomic vectors. They are logical, integer, double, complex, character and raw. lists list('Peter', 'Sarah', 'Tom', 'Helen') Lists are the R objects which contain elements of different types like − numbers, strings, vectors and another list inside it matrix matrix(c(1:5), nrow = 3, byrow = TRUE) Matrices are the R objects in which the elements are arranged in a two-dimensional rectangular layout. array array(data = c(1,2,3)) Arrays are the R data objects which can store data in more than two dimensions. For example − If we create an array of dimension (1, 2, 3) then it creates 3 rectangular matrices each with 1 rows and 2 columns. Arrays can store only one data type. data frame data.frame(mtcars) R version of Excel Spreadsheet. A data frame is a table or a two-dimensional array-like structure in which each column contains values of one variable and each row contains one set of values from each column. factor factor() Factors are the data objects which are used to categorize the data and store it as levels. They can store both strings and integers. They are useful in the columns which have a limited number of unique values. Like “Male,”Female\" and True, False etc. They are useful in data analysis for statistical modeling. help help(mean) or ?mean Default helper function in R. Opens up documentation on a particular function in the lower right quadrant of R. class class(mtcars$mpg) Tells us what R is recognizing something as concatenate (c) c(“a”, “b”, “c”) A quick utility for concatenating strings together filepath “/Users/james/Downloads/” The location on your computer where a file is stored. A filepath with a leading slash (akak “/” ) is also referred to as root. Root is the furthest back you can go on your computer. Think of a filepath like this - “/Earth/UnitedStates/Pennsylvania/Lancaster/” Additional examples can be found here 3.2 Rules Variable names must be assigned. names_list &lt;- list(&#39;Peter&#39;, &#39;Sarah&#39;, &#39;Tom&#39;, &#39;Helen&#39;) # is the Comment Operator - anything on the same line of the # comment operator will not be run by R. # comments can be above names_list &lt;- list(&#39;Peter&#39;, &#39;Sarah&#39;, &#39;Tom&#39;, &#39;Helen&#39;) # comments can be outside ## comments can be anywhere. Parantheses (), Brackets [], Curly brackets {}, Quotations \"\" must be used in pairs names_list = list(&#39;Peter&#39;, &#39;Sarah&#39;, &#39;Tom&#39;, &#39;Helen&#39;) for (n in names_list){ print(n) } If you don’t have a package, you must install that package. (After you install once, you don’t need to install again.) install.packages(&#39;ggplot2&#39;) Packages MUST be loaded for each R session. library(ggplot2) Variable names should not replicate function/package names. ## don&#39;t do this mean = mean(c(1,2,3)) ## do NOT do this ## DO this instead my_mean = mean(c(1,2,3)) ## do this instead 3.3 General Recommendations Comment, comment, comment. A comment is a brief note on what you were doing when you wrote a line of code. For example, if you write some R code that edits part of a dataframe (R’s version of an Excel Spreadsheet), comment what you were thinking here and why you did it this way. Once you become comfortable coding in R, you’ll be able to churn out new R scripts at a faster rate. It’s very important that you comment on what you’re doing at each step in the script so if you need to look back on something you wrote you can reference what you were doing there. A comment in R is declared using the pound symbol (#). Keep raw data raw. An advantage of R is being able to read in an original spreadsheet and output a new spreadsheet as a separate file. In other words, when you read in a dataset (for example, avocados.csv) and make changes to this file, do not save it was avocados.csv - thus overwriting the file. Instead, name it something like avocados_edited.csv. Also, notice how we use underscores (_) in between words of a filename - this is good practice that should be replicated (spaces are bad, see 4) When in doubt, Google your R question - look for StackOverflow links. StackOverflow is a web-forum where programmers can post questions for help. This is an incredible tool that even advanced programmers and developers use daily. There are other helpful forums out there - StackOverflow is the most popular. Spaces in variable/file names are BAD. A variable is an object or column that you create in R. For example, if you have a list of student names (student_names = list(\"John\", \"Peter\", \"Sebastian\"), the variable here would be student_names. Let’s get into the habit of using underscores ’_’ or dashes ‘-’ or periods ‘.’ to separate words instead of spaces. From the computers side of variable name storage, it’s much safer to declare a variable name such as data_file as opposed to data file Keep in mind, these will make more sense after we get more familiar with R - it’s alright if they’re confusing right now! "],["r-coding-fundamentals.html", "4 R Coding Fundamentals 4.1 Entering Input 4.2 Running Code 4.3 Evaluation 4.4 Packages and Functions 4.5 Arguments 4.6 R Objects 4.7 Creating Vectors 4.8 Mixing Objects 4.9 Changing Classes 4.10 Missing Values 4.11 Attributes 4.12 Matrices 4.13 Lists 4.14 Factors 4.15 Data Frames 4.16 Names 4.17 Summary", " 4 R Coding Fundamentals Now that we’re comfortable with R Studio and have some definitions under our belt, let’s dive in a little into some R code and discuss it. These fundamentals can always be referred back to when we might be stuck coding later on. 4.1 Entering Input In the R Script area, we write code. Whenever we want to assign a variable, we do so using the assignment operator. The &lt;- symbol is the assignment operator. We can also use = which is a bit more intuitive. It is alright to interchange these when assigning variables. val &lt;- 1 print(val) ## [1] 1 val ## [1] 1 msg &lt;- &quot;hello&quot; val and msg are both variables that we assigned. We use the # character to write comments inside our code. Commented code is NOT executed by R. x &lt;- ## Incomplete expression Anything to the right of the # (including the # itself) is ignored. 4.2 Running Code After placing the above code in your R Script area, we can run the code. Code execution is done in the R Console. We can “send” our code in the R Script to the R Console using the Run Button, ctrl + enter (Windows), or cmd + enter (Mac). We can select specific lines of code to run, larger chunks, or the entire R Script. 4.3 Evaluation When a complete expression is entered at the prompt, it is evaluated and the result of the evaluated expression is returned. The result may be auto-printed. val &lt;- 14 ## nothing printed val ## auto-printing occurs ## [1] 14 print(val) ## explicit printing ## [1] 14 The [1] shown in the output indicates that x is a vector and 14 is its first element. Typically we do not explicitly print variables since auto-printing is easier. When an R vector is printed you will notice that an index for the vector is printed in square brackets [] on the side. For example, see this integer sequence of length 10. my_seq &lt;- 10:20 my_seq ## [1] 10 11 12 13 14 15 16 17 18 19 20 Notice the [1] that preceeds the sequence. The output inside the square bracket is not part of the vector itself, it’s just part of the printed output that has additional information to be more user-friendly. This extra information is not part of the object itself. Also note that we used the : operator to create a sequence of integers from 10 to 20 (10:20). Note that the : operator is used to create integer sequences. 4.4 Packages and Functions In R, a package is a collection of functions. A function is a tool you can use to do something. In other words, imagine a package as a toolbox and functions as the tools within the toolbox. If we want to load the wrenches toolbox, we can load it like so - library(wrenches). Then, we can use different wrenches from that toolbox like - small_wrench(), medium_wrench(), big_wrench(). In R, a base package is automatically loaded in for you. Within the base package, we can find common functions such as mean(), min(), max(), etc. We can also find mathematical functions such as log(), sin(), cos(), etc. Even though it’s redundant, let’s load the base package. library(base) my_seq &lt;- 10:20 mean(my_seq) ## [1] 15 The mean of our sequence of numbers (stored as the object my_seq) is 15. It printed this out automatically due to the fact that we didn’t store it as an object. library(base) my_seq = 10:20 my_mean = mean(my_seq) my_mean ## [1] 15 Now, we stored the mean of our my_seq as my_mean. This object can now be found in our global environment (top right quadrant) and is recognized by R. Notice how I used the = assignment operator as opposed to &lt;-. Either can be used when assigning an object in R. Also, how do we know something is a function in R? Because of the () parentheses following the function name mean(). 4.5 Arguments Functions have changeable parameters called arguments. These arguments must be declared using the = operator and they are always separated by a comma. Let’s take a look at the sequence function seq() by running the following help() (you can also run ?seq. help(seq) Notice that we have arguments from, to, by, length.out, and along.with. These arguments are pre-definded, meaning if you don’t declare the values for the arguments, the function will automatically have arguments declared for you. my_seq &lt;- seq(from = 50, to = 100, by = 10) my_seq ## [1] 50 60 70 80 90 100 We declared our from, to, and by arguments here to create this new sequence of numbers from 50 to 100 spaced by 10. We declared the arguments using the = operator and separated them via a comma. Let’s try something different now… my_seq &lt;- seq(50,100,10) my_seq ## [1] 50 60 70 80 90 100 The same result. Even though I didn’t explicitly declare the functions, R assumed I was declaring arguments from, to, and by with the numbers separated by commas. This is called shorthand argument declaration. If you’re going to use shorthand argument delcaration, the order of the arguments must match the order they are listed in the function. However, if we explicitly declare our functions, we can use whatever order we want. my_seq &lt;- seq(by = 10, to = 100, from = 50) my_seq ## [1] 50 60 70 80 90 100 4.6 R Objects R has five basic classes of objects: character numeric (real numbers) integer complex logical (True/False) The most basic type of R object is a vector. Empty vectors can be created with the vector() function. There is really only one rule about vectors in R, which is that A vector can only contain objects of the same class. But of course, like any good rule, there is an exception, which is a list, which we will get to a bit later. A list is represented as a vector but can contain objects of different classes. Indeed, that’s usually why we use them. 4.7 Creating Vectors The c() function is referred to as the concatenate (combine) function. Using this, we can create vectors of objects by combining them together. x &lt;- c(1.25, 2.50) ## numeric x &lt;- c(TRUE, FALSE) ## logical x &lt;- c(T, F) ## logical x &lt;- c(&quot;yes&quot;, &quot;no&quot;, &quot;maybe&quot;) ## character x &lt;- 25:44 ## integer x &lt;- c(1+2i, 3+8i) ## complex Note that in the above example, T and F are short-hand ways to specify TRUE and FALSE. However, in general one should try to use the explicit TRUE and FALSE values when indicating logical values. 4.8 Mixing Objects There are occasions when different classes of R objects get mixed together. Sometimes this happens by accident but it can also happen on purpose. So what happens with the following code? y &lt;- c(1.7, &quot;a&quot;) ## character y &lt;- c(TRUE, 2) ## numeric y &lt;- c(&quot;a&quot;, TRUE) ## character In each case above, we are mixing objects of two different classes in a vector. But remember that the only rule about vectors says this is not allowed. When different objects are mixed in a vector, coercion occurs so that every element in the vector is of the same class. In the example above, we see the effect of implicit coercion. What R tries to do is find a way to represent all of the objects in the vector in a reasonable fashion. Sometimes this does exactly what you want and…sometimes not. For example, combining a numeric object with a character object will create a character vector, because numbers can usually be easily represented as strings. 4.9 Changing Classes Objects can be explicitly coerced from one class to another using the as.* functions. In other words, you can change the class of one thing to another via the as.* functions. x &lt;- 0:10 class(x) ## [1] &quot;integer&quot; as.numeric(x) ## [1] 0 1 2 3 4 5 6 7 8 9 10 as.logical(x) ## [1] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE as.character(x) ## [1] &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) as.numeric(x) ## Warning: NAs introduced by coercion ## [1] NA NA NA as.logical(x) ## [1] NA NA NA as.complex(x) ## Warning: NAs introduced by coercion ## [1] NA NA NA 4.10 Missing Values In certain datasets, you’ll find values called NA or NaN. NA is short for Not Available, NaN is short forNot a Number . This is equivalent to a blank grid cell in Microsoft Excel. is.na() is used to test objects if they are NA is.nan() is used to test for NaN NA values have a class also, so there are integer NA, character NA, etc. A NaN value is also NA but the converse is not true x = c(1,2,NA,NaN,5) is.na(x) ## [1] FALSE FALSE TRUE TRUE FALSE is.nan(x) ## [1] FALSE FALSE FALSE TRUE FALSE mean(x) ## [1] NA Sometimes, R will return NA. This can mean we haven’t given R every argument it needs to accomplish a task, we have used an incorrect function, we have given R an incomplete dataset, or we haven’t removed NAs from a calculation like mean(). Note that if you run help(mean) or ?mean(), you’ll see a logical argument called na.rm. mean(x, na.rm = TRUE) ## [1] 2.666667 4.11 Attributes R objects can have attributes, which are like metadata for the object. These metadata can be very useful in that they help to describe the object. For example, column names on a data frame help to tell us what data are contained in each of the columns. Some examples of R object attributes are names, dimnames dimensions (e.g. matrices, arrays) class (e.g. integer, numeric) length other user-defined attributes/metadata Attributes of an object (if any) can be accessed using the attributes() function. Not all R objects contain attributes, in which case the attributes() function returns NULL. 4.12 Matrices Matrices are vectors with a dimension attribute. The dimension attribute is itself an integer vector of length 2 (number of rows, number of columns) m &lt;- matrix(nrow = 2, ncol = 3) m ## [,1] [,2] [,3] ## [1,] NA NA NA ## [2,] NA NA NA dim(m) ## [1] 2 3 attributes(m) ## $dim ## [1] 2 3 Matrices are constructed column-wise, so entries can be thought of starting in the “upper left” corner and running down the columns. m &lt;- matrix(1:6, nrow = 2, ncol = 3) m ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 Matrices can also be created directly from vectors by adding a dimension attribute. m &lt;- 1:10 m ## [1] 1 2 3 4 5 6 7 8 9 10 dim(m) &lt;- c(2, 5) m ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 3 5 7 9 ## [2,] 2 4 6 8 10 Matrices can be created by column-binding or row-binding with the cbind() and rbind() functions. x &lt;- 1:3 y &lt;- 10:12 cbind(x, y) ## x y ## [1,] 1 10 ## [2,] 2 11 ## [3,] 3 12 rbind(x, y) ## [,1] [,2] [,3] ## x 1 2 3 ## y 10 11 12 4.13 Lists Lists are a special type of vector that can contain elements of different classes. Lists are a very important data type in R and you should get to know them well. Lists, in combination with the various “apply” functions discussed later, make for a powerful combination. Lists can be explicitly created using the list() function, which takes an arbitrary number of arguments. x &lt;- list(1, &quot;a&quot;, TRUE) x ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;a&quot; ## ## [[3]] ## [1] TRUE We can also create an empty list of a prespecified length with the vector() function x &lt;- vector(&quot;list&quot;, length = 5) x ## [[1]] ## NULL ## ## [[2]] ## NULL ## ## [[3]] ## NULL ## ## [[4]] ## NULL ## ## [[5]] ## NULL 4.14 Factors Factors are used to represent categorical data and can be unordered or ordered. One can think of a factor as an integer vector where each integer has a label. Using factors with labels is better than using integers because factors are self-describing. Having a variable that has values “Male” and “Female” is better than a variable that has values 1 and 2. Factor objects can be created with the factor() function. x &lt;- factor(c(&quot;yes&quot;, &quot;yes&quot;, &quot;no&quot;, &quot;yes&quot;, &quot;no&quot;)) x ## [1] yes yes no yes no ## Levels: no yes table(x) ## x ## no yes ## 2 3 ## See the underlying representation of factor unclass(x) ## [1] 2 2 1 2 1 ## attr(,&quot;levels&quot;) ## [1] &quot;no&quot; &quot;yes&quot; Often factors will be automatically created for you when you read a dataset in using a function like read.table(). Those functions often default to creating factors when they encounter data that look like characters or strings. The order of the levels of a factor can be set using the levels argument to factor(). This can be important in linear modelling because the first level is used as the baseline level. x &lt;- factor(c(&quot;yes&quot;, &quot;yes&quot;, &quot;no&quot;, &quot;yes&quot;, &quot;no&quot;)) x ## Levels are put in alphabetical order ## [1] yes yes no yes no ## Levels: no yes x &lt;- factor(c(&quot;yes&quot;, &quot;yes&quot;, &quot;no&quot;, &quot;yes&quot;, &quot;no&quot;), levels = c(&quot;yes&quot;, &quot;no&quot;)) x ## [1] yes yes no yes no ## Levels: yes no 4.15 Data Frames Data frames are used to store tabular data in R. They are an important type of object in R and are used in a variety of statistical modeling applications. We’ll be working with many dataframes throughout these tutorials. Data frames are represented as a special type of list where every element of the list has to have the same length. Each element of the list can be thought of as a column and the length of each element of the list is the number of rows. Unlike matrices, data frames can store different classes of objects in each column. Matrices must have every element be the same class (e.g. all integers or all numeric). In addition to column names, indicating the names of the variables or predictors, data frames have a special attribute called row.names which indicate information about each row of the data frame. Data frames are usually created by reading in a dataset using the read.table() or read.csv(). However, data frames can also be created explicitly with the data.frame() function or they can be coerced from other types of objects like lists. Data frames can be converted to a matrix by calling data.matrix(). While it might seem that the as.matrix() function should be used to coerce a data frame to a matrix, almost always, what you want is the result of data.matrix(). x &lt;- data.frame(foo = 1:4, bar = c(T, T, F, F)) x ## foo bar ## 1 1 TRUE ## 2 2 TRUE ## 3 3 FALSE ## 4 4 FALSE nrow(x) ## [1] 4 ncol(x) ## [1] 2 4.16 Names R objects can have names, which is very useful for writing readable code and self-describing objects. Here is an example of assigning names to an integer vector. x &lt;- 1:3 names(x) ## NULL names(x) &lt;- c(&quot;New York&quot;, &quot;Seattle&quot;, &quot;Los Angeles&quot;) x ## New York Seattle Los Angeles ## 1 2 3 names(x) ## [1] &quot;New York&quot; &quot;Seattle&quot; &quot;Los Angeles&quot; Lists can also have names, which is often very useful. x &lt;- list(&quot;Los Angeles&quot; = 1, Boston = 2, London = 3) x ## $`Los Angeles` ## [1] 1 ## ## $Boston ## [1] 2 ## ## $London ## [1] 3 names(x) ## [1] &quot;Los Angeles&quot; &quot;Boston&quot; &quot;London&quot; Matrices can have both column and row names. m &lt;- matrix(1:4, nrow = 2, ncol = 2) dimnames(m) &lt;- list(c(&quot;a&quot;, &quot;b&quot;), c(&quot;c&quot;, &quot;d&quot;)) m ## c d ## a 1 3 ## b 2 4 Column names and row names can be set separately using the colnames() and rownames() functions. colnames(m) &lt;- c(&quot;h&quot;, &quot;f&quot;) rownames(m) &lt;- c(&quot;x&quot;, &quot;z&quot;) m ## h f ## x 1 3 ## z 2 4 Note that for data frames, there is a separate function for setting the row names, the row.names() function. Also, data frames do not have column names, they just have names (like lists). So to set the column names of a data frame just use the names() function. Yes, I know its confusing. Here’s a quick summary: Object Set column names Set row names data frame names() row.names() matrix colnames() rownames() 4.17 Summary There are a variety of different builtin-data types in R. In this chapter we have reviewed the following object declaration packages, functions, arguments classes: numeric, logical, character, integer, complex vectors, lists missing values factors missing values data frames and matrices All R objects can have attributes that help to describe what is in the object. Perhaps the most useful attribute is names, such as column and row names in a data frame, or simply names in a vector or list. Attributes like dimensions are also important as they can modify the behavior of objects, like turning a vector into a matrix. The content in this section was adapted from Dr. Roger Peng "]]
